# Slither CI Workflow
# v2021.10.25
# MIT

name: slither

on:
  push:
    paths:
      - "**.sol"
      - ".github/workflows/slither.yml"

  pull_request_target:
    branches:
    - main
    - develop

# ensure permissions are explicitly defined
# by configuring one we disable the remaining permissions
# see: https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#jobsjob_idpermissions
# permissions:
#  contents: read

# ensure multiple CI processes are not running analysis on contracts
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request_target' && github.head_ref || github.ref }}
  cancel-in-progress: true


env:
  CI: true
  COMMIT_SHA: ${{ github.event.pull_request.head.sha }}
  PULL_NUMBER: ${{ github.event.pull_request.number }}
  RUN_ID: ${{ github.run_id }}
  FORCE_COLOR: 2

jobs:
  slither:
    runs-on: ubuntu-latest
    outputs:
      SLITHER_COVERAGE: ${{ steps.slither-analysis.outputs.SLITHER_COVERAGE }}
      
    strategy:
      fail-fast: false
      matrix:
        node: ["14.x"]
        os: ["ubuntu-latest"]
    steps:
      - uses: actions/checkout@v2
      - name: Nodejs 14.x
        uses: actions/setup-node@v2
        with:
          node-version: "14.x"
          check-latest: true
          always-auth: true
          registry-url: https://registry.npmjs.org
#          cache: 'yarn' dont cache for this workflow

      - name: Install Hardhat
        id: compile
        run: |
          yarn install
          npx hardhat compile
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install Slither
        run: pip3 install slither-analyzer
      - name: Prepare output
        run: |
          mkdir -p .github/slither-output
      - name: Run analysis
        id: analysis
        shell: bash
        run: |
          slither . --json-types compilations,console,detectors,printers,list-detectors,list-printers --exclude-dependencies --compile-force-framework hardhat >>.github/slither-output/slither_report.txt 2>&1 || true
          echo ::set-output name=SLITHER_COVERAGE::
        # @dev Alt. CI Coverage process
        # FOUND_WARNINGS = SLITHER_COVERAGE
        # $(node check-slither-coverage.js echo 'coverage-slither-change')
        # @dev Slither Coverage example
        # more complicated example
        # slither --exclude=divide-before-multiply,unused-return,timestamp,naming-convention,pragma,solc-version,external-function,reentrancy-benign,reentrancy-no-eth,arbitrary-send,incorrect-equality,reentrancy-events,assembly,uninitialized-local --filter-paths="@openzeppelin|WETH9.sol|uniswapV2"
      - name: Archive code coverage results
        uses: actions/upload-artifact@v2
        id: artifact
        with:
          name: slither-report
          path: .github/slither-output/slither_report.txt
      - name: Check status
        id: coverage
        shell: bash
        run: |
          FALSE_POSITIVE_WARNINGS=7
          # Highlight Coverage Status via Color coding
          FOUND_WARNINGS=$(grep "\d+ result" -Po .github/slither-output/slither_report.txt | sed 's/ result//g')
          if (( $(echo "$FOUND_WARNINGS <= 50" | bc -l) )) ; then
            COLOR=red
          elif (( $(echo "$FOUND_WARNINGS > 80" | bc -l) )); then
            COLOR=green
          else
            COLOR=orange
          fi
          # Create Coverage Badge
          # shellcheck disable=SC2154
          curl -sL curl "https://img.shields.io/badge/coavrege-$FOUND_WARNINGS%25-$COLOR" > badge.svg
          
          # output Slither Findings 
          echo "::group::Slither Analysis Report"
          echo "Slither Analysis $FOUND_WARNINGS issues"
          if [[ $FOUND_WARNINGS -gt $FALSE_POSITIVE_WARNINGS ]]; then echo "$FOUND_WARNINGS issues exceeds limit" >&2; exit 0; fi
          echo "::endgroup::"
# NOTE: we `exit 0` as these are warnings, not failures
# Found warnings creates a coverage badge
# parameters are adjustable. 
#
# Alternative to the color output:
#
#            then
#              echo "::set-output name=IS_PASSING::true"
#            else
#              echo "::set-output name=IS_PASSING::false"
#         fi
